cmake_minimum_required(VERSION 2.8)
project(sony_camera_node LANGUAGES CXX)

### Append project cmake script dir ###
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  sensor_msgs
  image_transport
  message_generation
#  cv_bridge
)

#find_package(OpenCV 4 REQUIRED)

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
add_service_files(
  FILES
  CameraCommand.srv
)

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  std_msgs
)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
#  LIBRARIES sony_camera_node
  CATKIN_DEPENDS message_runtime roscpp rospy std_msgs
#  DEPENDS system_lib
)

### Enumerate project files ###
include(enum_cli_hdr)
include(enum_cli_src)
include(enum_crsdk_hdr)

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
#  ${OpenCV_INCLUDE_DIRS}
)

### Define output target ###
set(sony_camera_node "${PROJECT_NAME}")
add_executable(${sony_camera_node}
    ${cli_hdrs}
    ${cli_srcs}
    ${crsdk_hdrs}
)

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/sony_camera_node_node.cpp)
#add_executable(pub_node src/pub_node.cpp)
#add_executable(sub_node src/sub_node.cpp)
#add_executable(camera_interface_node src/camera_interface_node.cpp)
#add_executable(uvc_camera_node src/uvc_camera_node.cpp)
#add_executable(optical_flow_node src/optical_flow_node.cpp)
#add_executable(visual_odometry_node src/visual_odometry_node.cpp)
#add_executable(live_img_vis_odom_node src/live_img_vis_odom_node.cpp)
#add_executable(calibrate_camera_node src/calibrate_camera_node.cpp)

set_target_properties(${sony_camera_node} PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED YES
    CXX_EXTENSIONS NO
    BUILD_RPATH "$ORIGIN"
    INSTALL_RPATH "$ORIGIN"
)

## Specify char is signed-char to fix mismatch with Raspbian
target_compile_options(${sony_camera_node}
    PRIVATE
        -fsigned-char
)

target_include_directories(${sony_camera_node}
    PRIVATE
        ${crsdk_hdr_dir} # defined in enum script
)

### Configure external library directories ###
set(ldir ${CMAKE_CURRENT_SOURCE_DIR}/external)
set(cr_ldir ${ldir}/crsdk)

### Link CRSDK library
find_library(camera_remote Cr_Core HINTS ${cr_ldir})
target_link_libraries(${sony_camera_node}
    PRIVATE
        ${camera_remote}
)

### Windows specific configuration ###
if(WIN32)
    ## Build with unicode on Windows
    target_compile_definitions(${sony_camera_node} PRIVATE UNICODE _UNICODE)
endif(WIN32)

### Linux specific configuration ###
if(UNIX)
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8)
            # Must use std::experimental namespace if older than GCC8
            message("[${PROJECT_NAME}] GCC version less than 8. Using std::experimental namespace.")
            target_compile_definitions(${sony_camera_node} PRIVATE USE_EXPERIMENTAL_FS)
        endif()

        if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9)
            # Must explicitly link separate std::filesystem if older than GCC9
            message("[${PROJECT_NAME}] GCC version less than 9. Explicitly linking separate std::filesystem library.")
            target_link_libraries(${sony_camera_node} PRIVATE stdc++fs)
        endif()
    endif()
endif(UNIX)

## Copy required library binaries
add_custom_command(TARGET ${sony_camera_node} PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${cr_ldir} $<TARGET_FILE_DIR:${sony_camera_node}>
)

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )
target_link_libraries(${sony_camera_node} ${catkin_LIBRARIES})
#target_link_libraries(pub_node ${catkin_LIBRARIES})
#target_link_libraries(sub_node ${catkin_LIBRARIES})
#target_link_libraries(camera_interface_node ${catkin_LIBRARIES})
#target_link_libraries(uvc_camera_node
#	${catkin_LIBRARIES}
#	${OpenCV_LIBRARIES}
#)
#target_link_libraries(optical_flow_node
#	${catkin_LIBRARIES}
#	${OpenCV_LIBRARIES}
#)

#target_link_libraries(visual_odometry_node
#	${catkin_LIBRARIES}
#	${OpenCV_LIBRARIES}
#)

#target_link_libraries(live_img_vis_odom_node
#	${catkin_LIBRARIES}
#	${OpenCV_LIBRARIES}
#)

#target_link_libraries(calibrate_camera_node
#	${catkin_LIBRARIES}
#	${OpenCV_LIBRARIES}
#)

## Install application
## '.' means, install to the root directory of CMAKE_INSTALL_PREFIX
install(TARGETS ${sony_camera_node} DESTINATION .)
install(DIRECTORY ${cr_ldir}/ DESTINATION .)
